use num_traits::FromPrimitive;
use xed_sys2::xed_interface::*;

#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, Primitive)]
pub enum OperandWidth {
    Invalid = XED_OPERAND_WIDTH_INVALID as isize,
    Asz = XED_OPERAND_WIDTH_ASZ as isize,
    Ssz = XED_OPERAND_WIDTH_SSZ as isize,
    Pseudo = XED_OPERAND_WIDTH_PSEUDO as isize,
    PseudoX87 = XED_OPERAND_WIDTH_PSEUDOX87 as isize,
    A16 = XED_OPERAND_WIDTH_A16 as isize,
    A32 = XED_OPERAND_WIDTH_A32 as isize,
    B = XED_OPERAND_WIDTH_B as isize,
    D = XED_OPERAND_WIDTH_D as isize,
    I8 = XED_OPERAND_WIDTH_I8 as isize,
    U8 = XED_OPERAND_WIDTH_U8 as isize,
    I16 = XED_OPERAND_WIDTH_I16 as isize,
    U16 = XED_OPERAND_WIDTH_U16 as isize,
    I32 = XED_OPERAND_WIDTH_I32 as isize,
    U32 = XED_OPERAND_WIDTH_U32 as isize,
    I64 = XED_OPERAND_WIDTH_I64 as isize,
    U64 = XED_OPERAND_WIDTH_U64 as isize,
    F16 = XED_OPERAND_WIDTH_F16 as isize,
    F32 = XED_OPERAND_WIDTH_F32 as isize,
    F64 = XED_OPERAND_WIDTH_F64 as isize,
    DQ = XED_OPERAND_WIDTH_DQ as isize,
    Xub = XED_OPERAND_WIDTH_XUB as isize,
    Xuw = XED_OPERAND_WIDTH_XUW as isize,
    Xud = XED_OPERAND_WIDTH_XUD as isize,
    Xuq = XED_OPERAND_WIDTH_XUQ as isize,
    X128 = XED_OPERAND_WIDTH_X128 as isize,
    Xb = XED_OPERAND_WIDTH_XB as isize,
    Xw = XED_OPERAND_WIDTH_XW as isize,
    Xd = XED_OPERAND_WIDTH_XD as isize,
    Xq = XED_OPERAND_WIDTH_XQ as isize,
    Mb = XED_OPERAND_WIDTH_MB as isize,
    Mw = XED_OPERAND_WIDTH_MW as isize,
    Mq = XED_OPERAND_WIDTH_MQ as isize,
    M64Int = XED_OPERAND_WIDTH_M64INT as isize,
    M64Real = XED_OPERAND_WIDTH_M64REAL as isize,
    Mem108 = XED_OPERAND_WIDTH_MEM108 as isize,
    Mem14 = XED_OPERAND_WIDTH_MEM14 as isize,
    Mem16 = XED_OPERAND_WIDTH_MEM16 as isize,
    Mem16Int = XED_OPERAND_WIDTH_MEM16INT as isize,
    Mem28 = XED_OPERAND_WIDTH_MEM28 as isize,
    Mem32Int = XED_OPERAND_WIDTH_MEM32INT as isize,
    Mem32Real = XED_OPERAND_WIDTH_MEM32REAL as isize,
    Mem80Dec = XED_OPERAND_WIDTH_MEM80DEC as isize,
    Mem80Real = XED_OPERAND_WIDTH_MEM80REAL as isize,
    F80 = XED_OPERAND_WIDTH_F80 as isize,
    Mem94 = XED_OPERAND_WIDTH_MEM94 as isize,
    MFpXEnv = XED_OPERAND_WIDTH_MFPXENV as isize,
    MxSave = XED_OPERAND_WIDTH_MXSAVE as isize,
    MPrefetch = XED_OPERAND_WIDTH_MPREFETCH as isize,
    P = XED_OPERAND_WIDTH_P as isize,
    P2 = XED_OPERAND_WIDTH_P2 as isize,
    Pd = XED_OPERAND_WIDTH_PD as isize,
    Ps = XED_OPERAND_WIDTH_PS as isize,
    Pi = XED_OPERAND_WIDTH_PI as isize,
    Q = XED_OPERAND_WIDTH_Q as isize,
    S = XED_OPERAND_WIDTH_S as isize,
    S64 = XED_OPERAND_WIDTH_S64 as isize,
    Sd = XED_OPERAND_WIDTH_SD as isize,
    Si = XED_OPERAND_WIDTH_SI as isize,
    Ss = XED_OPERAND_WIDTH_SS as isize,
    V = XED_OPERAND_WIDTH_V as isize,
    Y = XED_OPERAND_WIDTH_Y as isize,
    W = XED_OPERAND_WIDTH_W as isize,
    Z = XED_OPERAND_WIDTH_Z as isize,
    Spw8 = XED_OPERAND_WIDTH_SPW8 as isize,
    Spw = XED_OPERAND_WIDTH_SPW as isize,
    Spw5 = XED_OPERAND_WIDTH_SPW5 as isize,
    Spw3 = XED_OPERAND_WIDTH_SPW3 as isize,
    Spw2 = XED_OPERAND_WIDTH_SPW2 as isize,
    I1 = XED_OPERAND_WIDTH_I1 as isize,
    I2 = XED_OPERAND_WIDTH_I2 as isize,
    I3 = XED_OPERAND_WIDTH_I3 as isize,
    I4 = XED_OPERAND_WIDTH_I4 as isize,
    I5 = XED_OPERAND_WIDTH_I5 as isize,
    I6 = XED_OPERAND_WIDTH_I6 as isize,
    I7 = XED_OPERAND_WIDTH_I7 as isize,
    Var = XED_OPERAND_WIDTH_VAR as isize,
    Bnd32 = XED_OPERAND_WIDTH_BND32 as isize,
    Bnd64 = XED_OPERAND_WIDTH_BND64 as isize,
    Qq = XED_OPERAND_WIDTH_QQ as isize,
    Yub = XED_OPERAND_WIDTH_YUB as isize,
    Yud = XED_OPERAND_WIDTH_YUD as isize,
    Yuw = XED_OPERAND_WIDTH_YUW as isize,
    Yuq = XED_OPERAND_WIDTH_YUQ as isize,
    Y128 = XED_OPERAND_WIDTH_Y128 as isize,
    Yb = XED_OPERAND_WIDTH_YB as isize,
    Yw = XED_OPERAND_WIDTH_YW as isize,
    Yd = XED_OPERAND_WIDTH_YD as isize,
    Yq = XED_OPERAND_WIDTH_YQ as isize,
    Yps = XED_OPERAND_WIDTH_YPS as isize,
    Vv = XED_OPERAND_WIDTH_VV as isize,
    Zv = XED_OPERAND_WIDTH_ZV as isize,
    Wrd = XED_OPERAND_WIDTH_WRD as isize,
    Mskw = XED_OPERAND_WIDTH_MSKW as isize,
    ZMskw = XED_OPERAND_WIDTH_ZMSKW as isize,
    ZF32 = XED_OPERAND_WIDTH_ZF32 as isize,
    ZF64 = XED_OPERAND_WIDTH_ZF64 as isize,
    Zb = XED_OPERAND_WIDTH_ZB as isize,
    Zw = XED_OPERAND_WIDTH_ZW as isize,
    Zd = XED_OPERAND_WIDTH_ZD as isize,
    Zq = XED_OPERAND_WIDTH_ZQ as isize,
    Zub = XED_OPERAND_WIDTH_ZUB as isize,
    Zuw = XED_OPERAND_WIDTH_ZUW as isize,
    Zud = XED_OPERAND_WIDTH_ZUD as isize,
    Zuq = XED_OPERAND_WIDTH_ZUQ as isize,
    ZI8 = XED_OPERAND_WIDTH_ZI8 as isize,
    ZI16 = XED_OPERAND_WIDTH_ZI16 as isize,
    ZI32 = XED_OPERAND_WIDTH_ZI32 as isize,
    ZI64 = XED_OPERAND_WIDTH_ZI64 as isize,
    ZU8 = XED_OPERAND_WIDTH_ZU8 as isize,
    ZU16 = XED_OPERAND_WIDTH_ZU16 as isize,
    ZU32 = XED_OPERAND_WIDTH_ZU32 as isize,
    ZU64 = XED_OPERAND_WIDTH_ZU64 as isize,
    ZU128 = XED_OPERAND_WIDTH_ZU128 as isize,
}

impl From<xed_operand_width_enum_t> for OperandWidth {
    fn from(x: xed_operand_width_enum_t) -> Self {
        Self::from_u32(x).unwrap_or(OperandWidth::Invalid)
    }
}

impl From<OperandWidth> for xed_operand_width_enum_t {
    fn from(x: OperandWidth) -> Self {
        x as Self
    }
}
