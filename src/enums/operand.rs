use num_traits::FromPrimitive;
use xed_sys2::xed_interface::*;

#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, Primitive)]
pub enum OperandEnum {
    Invalid = XED_OPERAND_INVALID as isize,
    Agen = XED_OPERAND_AGEN as isize,
    Amd3DNow = XED_OPERAND_AMD3DNOW as isize,
    Asz = XED_OPERAND_ASZ as isize,
    Base0 = XED_OPERAND_BASE0 as isize,
    Base1 = XED_OPERAND_BASE1 as isize,
    BCast = XED_OPERAND_BCAST as isize,
    BCrc = XED_OPERAND_BCRC as isize,
    BrDispWidth = XED_OPERAND_BRDISP_WIDTH as isize,
    Cet = XED_OPERAND_CET as isize,
    Chip = XED_OPERAND_CHIP as isize,
    ClDemote = XED_OPERAND_CLDEMOTE as isize,
    DefaultSeg = XED_OPERAND_DEFAULT_SEG as isize,
    Df32 = XED_OPERAND_DF32 as isize,
    Df64 = XED_OPERAND_DF64 as isize,
    Disp = XED_OPERAND_DISP as isize,
    DispWidth = XED_OPERAND_DISP_WIDTH as isize,
    Dummy = XED_OPERAND_DUMMY as isize,
    Easz = XED_OPERAND_EASZ as isize,
    ElementSize = XED_OPERAND_ELEMENT_SIZE as isize,
    EncoderPreferred = XED_OPERAND_ENCODER_PREFERRED as isize,
    Eosz = XED_OPERAND_EOSZ as isize,
    Error = XED_OPERAND_ERROR as isize,
    Esrc = XED_OPERAND_ESRC as isize,
    FirstF2F3 = XED_OPERAND_FIRST_F2F3 as isize,
    HasModrm = XED_OPERAND_HAS_MODRM as isize,
    HasSib = XED_OPERAND_HAS_SIB as isize,
    Hint = XED_OPERAND_HINT as isize,
    IClass = XED_OPERAND_ICLASS as isize,
    IldF2 = XED_OPERAND_ILD_F2 as isize,
    IldF3 = XED_OPERAND_ILD_F3 as isize,
    IldSeg = XED_OPERAND_ILD_SEG as isize,
    Imm0 = XED_OPERAND_IMM0 as isize,
    Imm0Signed = XED_OPERAND_IMM0SIGNED as isize,
    Imm1 = XED_OPERAND_IMM1 as isize,
    Imm1Bytes = XED_OPERAND_IMM1_BYTES as isize,
    Index = XED_OPERAND_INDEX as isize,
    LastF2F3 = XED_OPERAND_LAST_F2F3 as isize,
    Llrc = XED_OPERAND_LLRC as isize,
    Lock = XED_OPERAND_LOCK as isize,
    Lzcnt = XED_OPERAND_LZCNT as isize,
    Map = XED_OPERAND_MAP as isize,
    Mask = XED_OPERAND_MASK as isize,
    MaxBytes = XED_OPERAND_MAX_BYTES as isize,
    Mem0 = XED_OPERAND_MEM0 as isize,
    Mem1 = XED_OPERAND_MEM1 as isize,
    MemWidth = XED_OPERAND_MEM_WIDTH as isize,
    Mod = XED_OPERAND_MOD as isize,
    ModeP5 = XED_OPERAND_MODEP5 as isize,
    ModeP55C = XED_OPERAND_MODEP55C as isize,
    ModeFirstPrefix = XED_OPERAND_MODE_FIRST_PREFIX as isize,
    ModrmByte = XED_OPERAND_MODRM_BYTE as isize,
    MpxMode = XED_OPERAND_MPXMODE as isize,
    NeedRex = XED_OPERAND_NEEDREX as isize,
    NeedMemDisp = XED_OPERAND_NEED_MEMDISP as isize,
    NElem = XED_OPERAND_NELEM as isize,
    NominalOpcode = XED_OPERAND_NOMINAL_OPCODE as isize,
    NoRex = XED_OPERAND_NOREX as isize,
    NoScaleDisp8 = XED_OPERAND_NO_SCALE_DISP8 as isize,
    NPrefixes = XED_OPERAND_NPREFIXES as isize,
    NRexes = XED_OPERAND_NREXES as isize,
    NSegPrefixes = XED_OPERAND_NSEG_PREFIXES as isize,
    Osz = XED_OPERAND_OSZ as isize,
    OutReg = XED_OPERAND_OUTREG as isize,
    OutOfBytes = XED_OPERAND_OUT_OF_BYTES as isize,
    P4 = XED_OPERAND_P4 as isize,
    PosDisp = XED_OPERAND_POS_DISP as isize,
    PosImm = XED_OPERAND_POS_IMM as isize,
    PosImm1 = XED_OPERAND_POS_IMM1 as isize,
    PosModrm = XED_OPERAND_POS_MODRM as isize,
    PosNominalOpcode = XED_OPERAND_POS_NOMINAL_OPCODE as isize,
    PosSib = XED_OPERAND_POS_SIB as isize,
    Prefix66 = XED_OPERAND_PREFIX66 as isize,
    Ptr = XED_OPERAND_PTR as isize,
    RealMode = XED_OPERAND_REALMODE as isize,
    Reg = XED_OPERAND_REG as isize,
    Reg0 = XED_OPERAND_REG0 as isize,
    Reg1 = XED_OPERAND_REG1 as isize,
    Reg2 = XED_OPERAND_REG2 as isize,
    Reg3 = XED_OPERAND_REG3 as isize,
    Reg4 = XED_OPERAND_REG4 as isize,
    Reg5 = XED_OPERAND_REG5 as isize,
    Reg6 = XED_OPERAND_REG6 as isize,
    Reg7 = XED_OPERAND_REG7 as isize,
    Reg8 = XED_OPERAND_REG8 as isize,
    RelBr = XED_OPERAND_RELBR as isize,
    Rep = XED_OPERAND_REP as isize,
    Rex = XED_OPERAND_REX as isize,
    RexB = XED_OPERAND_REXB as isize,
    RexR = XED_OPERAND_REXR as isize,
    RexRR = XED_OPERAND_REXRR as isize,
    RexW = XED_OPERAND_REXW as isize,
    RexX = XED_OPERAND_REXX as isize,
    Rm = XED_OPERAND_RM as isize,
    RoundC = XED_OPERAND_ROUNDC as isize,
    Sae = XED_OPERAND_SAE as isize,
    Scale = XED_OPERAND_SCALE as isize,
    Seg0 = XED_OPERAND_SEG0 as isize,
    Seg1 = XED_OPERAND_SEG1 as isize,
    SegOvd = XED_OPERAND_SEG_OVD as isize,
    Sib = XED_OPERAND_SIB as isize,
    SibBase = XED_OPERAND_SIBBASE as isize,
    SibIndex = XED_OPERAND_SIBINDEX as isize,
    SibScale = XED_OPERAND_SIBSCALE as isize,
    SkipOsz = XED_OPERAND_SKIP_OSZ as isize,
    SMode = XED_OPERAND_SMODE as isize,
    Srm = XED_OPERAND_SRM as isize,
    Tzcnt = XED_OPERAND_TZCNT as isize,
    UBit = XED_OPERAND_UBIT as isize,
    UImm0 = XED_OPERAND_UIMM0 as isize,
    UImm1 = XED_OPERAND_UIMM1 as isize,
    UsingDefaultSegment0 = XED_OPERAND_USING_DEFAULT_SEGMENT0 as isize,
    UsingDefaultSegment1 = XED_OPERAND_USING_DEFAULT_SEGMENT1 as isize,
    VexDest210 = XED_OPERAND_VEXDEST210 as isize,
    VexDest3 = XED_OPERAND_VEXDEST3 as isize,
    VexDest4 = XED_OPERAND_VEXDEST4 as isize,
    VexValid = XED_OPERAND_VEXVALID as isize,
    VexC4 = XED_OPERAND_VEX_C4 as isize,
    VexPrefix = XED_OPERAND_VEX_PREFIX as isize,
    Vl = XED_OPERAND_VL as isize,
    WbNoInvD = XED_OPERAND_WBNOINVD as isize,
    Zeroing = XED_OPERAND_ZEROING as isize,
}

impl From<xed_operand_enum_t> for OperandEnum {
    fn from(x: xed_operand_enum_t) -> Self {
        Self::from_u32(x).unwrap_or(OperandEnum::Invalid)
    }
}

impl From<OperandEnum> for xed_operand_enum_t {
    fn from(x: OperandEnum) -> Self {
        x as Self
    }
}
