use crate::*;
use num_traits::FromPrimitive;
use xed_sys2::xed_interface::*;

#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, Primitive)]
pub enum IsaSet {
    Invalid = XED_ISA_SET_INVALID as isize,
    _3DNow = XED_ISA_SET_3DNOW as isize,
    AdoxAdcx = XED_ISA_SET_ADOX_ADCX as isize,
    Aes = XED_ISA_SET_AES as isize,
    Amd = XED_ISA_SET_AMD as isize,
    Avx = XED_ISA_SET_AVX as isize,
    Avx2 = XED_ISA_SET_AVX2 as isize,
    Avx2Gather = XED_ISA_SET_AVX2GATHER as isize,
    Avx512Bw128 = XED_ISA_SET_AVX512BW_128 as isize,
    Avx512Bw128N = XED_ISA_SET_AVX512BW_128N as isize,
    Avx512Bw256 = XED_ISA_SET_AVX512BW_256 as isize,
    Avx512Bw512 = XED_ISA_SET_AVX512BW_512 as isize,
    Avx512BwKop = XED_ISA_SET_AVX512BW_KOP as isize,
    Avx512Cd128 = XED_ISA_SET_AVX512CD_128 as isize,
    Avx512Cd256 = XED_ISA_SET_AVX512CD_256 as isize,
    Avx512Cd512 = XED_ISA_SET_AVX512CD_512 as isize,
    Avx512Dq128 = XED_ISA_SET_AVX512DQ_128 as isize,
    Avx512Dq128N = XED_ISA_SET_AVX512DQ_128N as isize,
    Avx512Dq256 = XED_ISA_SET_AVX512DQ_256 as isize,
    Avx512Dq512 = XED_ISA_SET_AVX512DQ_512 as isize,
    Avx512DqKop = XED_ISA_SET_AVX512DQ_KOP as isize,
    Avx512DqScalar = XED_ISA_SET_AVX512DQ_SCALAR as isize,
    Avx512Er512 = XED_ISA_SET_AVX512ER_512 as isize,
    Avx512ErScalar = XED_ISA_SET_AVX512ER_SCALAR as isize,
    Avx512F128 = XED_ISA_SET_AVX512F_128 as isize,
    Avx512F128N = XED_ISA_SET_AVX512F_128N as isize,
    Avx512F256 = XED_ISA_SET_AVX512F_256 as isize,
    Avx512F512 = XED_ISA_SET_AVX512F_512 as isize,
    Avx512FKop = XED_ISA_SET_AVX512F_KOP as isize,
    Avx512FScalar = XED_ISA_SET_AVX512F_SCALAR as isize,
    Avx512Pf512 = XED_ISA_SET_AVX512PF_512 as isize,
    Avx512_4FMaps512 = XED_ISA_SET_AVX512_4FMAPS_512 as isize,
    Avx512_4FMapsScalar = XED_ISA_SET_AVX512_4FMAPS_SCALAR as isize,
    Avx512_4Vnniw512 = XED_ISA_SET_AVX512_4VNNIW_512 as isize,
    Avx512BitAlg128 = XED_ISA_SET_AVX512_BITALG_128 as isize,
    Avx512BitAlg256 = XED_ISA_SET_AVX512_BITALG_256 as isize,
    Avx512BitAlg512 = XED_ISA_SET_AVX512_BITALG_512 as isize,
    Avx512Gfni128 = XED_ISA_SET_AVX512_GFNI_128 as isize,
    Avx512Gfni256 = XED_ISA_SET_AVX512_GFNI_256 as isize,
    Avx512Gfni512 = XED_ISA_SET_AVX512_GFNI_512 as isize,
    Avx512Ifma128 = XED_ISA_SET_AVX512_IFMA_128 as isize,
    Avx512Ifma256 = XED_ISA_SET_AVX512_IFMA_256 as isize,
    Avx512Ifma512 = XED_ISA_SET_AVX512_IFMA_512 as isize,
    Avx512Vaes128 = XED_ISA_SET_AVX512_VAES_128 as isize,
    Avx512Vaes256 = XED_ISA_SET_AVX512_VAES_256 as isize,
    Avx512Vaes512 = XED_ISA_SET_AVX512_VAES_512 as isize,
    Avx512VBmi2_128 = XED_ISA_SET_AVX512_VBMI2_128 as isize,
    Avx512VBmi2_256 = XED_ISA_SET_AVX512_VBMI2_256 as isize,
    Avx512VBmi2_512 = XED_ISA_SET_AVX512_VBMI2_512 as isize,
    Avx512VBmi128 = XED_ISA_SET_AVX512_VBMI_128 as isize,
    Avx512VBmi256 = XED_ISA_SET_AVX512_VBMI_256 as isize,
    Avx512VBmi512 = XED_ISA_SET_AVX512_VBMI_512 as isize,
    Avx512Vnni128 = XED_ISA_SET_AVX512_VNNI_128 as isize,
    Avx512Vnni256 = XED_ISA_SET_AVX512_VNNI_256 as isize,
    Avx512Vnni512 = XED_ISA_SET_AVX512_VNNI_512 as isize,
    Avx512VPclMulQdq128 = XED_ISA_SET_AVX512_VPCLMULQDQ_128 as isize,
    Avx512VPclMulQdq256 = XED_ISA_SET_AVX512_VPCLMULQDQ_256 as isize,
    Avx512VPclMulQdq512 = XED_ISA_SET_AVX512_VPCLMULQDQ_512 as isize,
    AvxAes = XED_ISA_SET_AVXAES as isize,
    AvxGfni = XED_ISA_SET_AVX_GFNI as isize,
    Bmi1 = XED_ISA_SET_BMI1 as isize,
    Bmi2 = XED_ISA_SET_BMI2 as isize,
    Cet = XED_ISA_SET_CET as isize,
    ClDemote = XED_ISA_SET_CLDEMOTE as isize,
    ClFlushOpt = XED_ISA_SET_CLFLUSHOPT as isize,
    ClFsh = XED_ISA_SET_CLFSH as isize,
    ClWb = XED_ISA_SET_CLWB as isize,
    ClZero = XED_ISA_SET_CLZERO as isize,
    CMov = XED_ISA_SET_CMOV as isize,
    Cmpxchg16B = XED_ISA_SET_CMPXCHG16B as isize,
    //Enclv = XED_ISA_SET_ENCLV as isize,
    F16C = XED_ISA_SET_F16C as isize,
    FatNop = XED_ISA_SET_FAT_NOP as isize,
    FcMov = XED_ISA_SET_FCMOV as isize,
    Fma = XED_ISA_SET_FMA as isize,
    Fma4 = XED_ISA_SET_FMA4 as isize,
    FxSave = XED_ISA_SET_FXSAVE as isize,
    FxSave64 = XED_ISA_SET_FXSAVE64 as isize,
    Gfni = XED_ISA_SET_GFNI as isize,
    I186 = XED_ISA_SET_I186 as isize,
    I286Protected = XED_ISA_SET_I286PROTECTED as isize,
    I286Real = XED_ISA_SET_I286REAL as isize,
    I386 = XED_ISA_SET_I386 as isize,
    I486 = XED_ISA_SET_I486 as isize,
    I486Real = XED_ISA_SET_I486REAL as isize,
    I86 = XED_ISA_SET_I86 as isize,
    InvPcid = XED_ISA_SET_INVPCID as isize,
    Lahf = XED_ISA_SET_LAHF as isize,
    LongMode = XED_ISA_SET_LONGMODE as isize,
    Lzcnt = XED_ISA_SET_LZCNT as isize,
    Monitor = XED_ISA_SET_MONITOR as isize,
    MonitorX = XED_ISA_SET_MONITORX as isize,
    MovBe = XED_ISA_SET_MOVBE as isize,
    MovDir = XED_ISA_SET_MOVDIR as isize,
    Mpx = XED_ISA_SET_MPX as isize,
    Pause = XED_ISA_SET_PAUSE as isize,
    PclMulQdq = XED_ISA_SET_PCLMULQDQ as isize,
    PConfig = XED_ISA_SET_PCONFIG as isize,
    PentiumMmx = XED_ISA_SET_PENTIUMMMX as isize,
    PentiumReal = XED_ISA_SET_PENTIUMREAL as isize,
    Pku = XED_ISA_SET_PKU as isize,
    PopCnt = XED_ISA_SET_POPCNT as isize,
    PPro = XED_ISA_SET_PPRO as isize,
    PrefetchW = XED_ISA_SET_PREFETCHW as isize,
    PrefetchWT1 = XED_ISA_SET_PREFETCHWT1 as isize,
    PrefetchNop = XED_ISA_SET_PREFETCH_NOP as isize,
    Pt = XED_ISA_SET_PT as isize,
    RdPid = XED_ISA_SET_RDPID as isize,
    RdPmc = XED_ISA_SET_RDPMC as isize,
    RdRand = XED_ISA_SET_RDRAND as isize,
    RdSeed = XED_ISA_SET_RDSEED as isize,
    RdTscp = XED_ISA_SET_RDTSCP as isize,
    RdWrFsGs = XED_ISA_SET_RDWRFSGS as isize,
    Rtm = XED_ISA_SET_RTM as isize,
    Sgx = XED_ISA_SET_SGX as isize,
    SgxEnclv = XED_ISA_SET_SGX_ENCLV as isize,
    Sha = XED_ISA_SET_SHA as isize,
    SMap = XED_ISA_SET_SMAP as isize,
    Smx = XED_ISA_SET_SMX as isize,
    Sse = XED_ISA_SET_SSE as isize,
    Sse2 = XED_ISA_SET_SSE2 as isize,
    Sse2Mmx = XED_ISA_SET_SSE2MMX as isize,
    Sse3 = XED_ISA_SET_SSE3 as isize,
    Sse3x87 = XED_ISA_SET_SSE3X87 as isize,
    Sse4 = XED_ISA_SET_SSE4 as isize,
    Sse42 = XED_ISA_SET_SSE42 as isize,
    SseMxcsr = XED_ISA_SET_SSEMXCSR as isize,
    SsePrefetch = XED_ISA_SET_SSE_PREFETCH as isize,
    Ssse3 = XED_ISA_SET_SSSE3 as isize,
    Ssse3Mmx = XED_ISA_SET_SSSE3MMX as isize,
    Svm = XED_ISA_SET_SVM as isize,
    Tbm = XED_ISA_SET_TBM as isize,
    Vaes = XED_ISA_SET_VAES as isize,
    VmFunc = XED_ISA_SET_VMFUNC as isize,
    VPclMulQdq = XED_ISA_SET_VPCLMULQDQ as isize,
    Vtx = XED_ISA_SET_VTX as isize,
    WaitPkg = XED_ISA_SET_WAITPKG as isize,
    WbNoInvD = XED_ISA_SET_WBNOINVD as isize,
    X87 = XED_ISA_SET_X87 as isize,
    XOp = XED_ISA_SET_XOP as isize,
    XSave = XED_ISA_SET_XSAVE as isize,
    XSaveC = XED_ISA_SET_XSAVEC as isize,
    XSaveOpt = XED_ISA_SET_XSAVEOPT as isize,
    XSaveS = XED_ISA_SET_XSAVES as isize,
}

impl IsaSet {
    /// Returns whether the isa_set is par included in the
    /// specified chip.
    ///
    /// Every Intel XED iform belongs to one [`IsaSet`](crate::IsaSet).
    /// Each Intel XED chip of type [`Chip`](crate::Chip) represents
    /// a collection of xed "isa-sets".
    pub fn valid_for_chip(self, chip: Chip) -> bool {
        unsafe { xed_isa_set_is_valid_for_chip(self.into(), chip.into()) != 0 }
    }
}

impl From<xed_isa_set_enum_t> for IsaSet {
    fn from(x: xed_isa_set_enum_t) -> Self {
        Self::from_u32(x).unwrap_or(IsaSet::Invalid)
    }
}

impl From<IsaSet> for xed_isa_set_enum_t {
    fn from(x: IsaSet) -> Self {
        x as Self
    }
}
