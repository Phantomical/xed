use num_traits::FromPrimitive;
use xed_sys2::xed_interface::*;

#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, Primitive)]
pub enum Attribute {
    Invalid = XED_ATTRIBUTE_INVALID as isize,
    AMDOnly = XED_ATTRIBUTE_AMDONLY as isize,
    ATTOperandOrderException = XED_ATTRIBUTE_ATT_OPERAND_ORDER_EXCEPTION as isize,
    BroadcaseEnabled = XED_ATTRIBUTE_BROADCAST_ENABLED as isize,
    ByteOp = XED_ATTRIBUTE_BYTEOP as isize,
    Disp8EighthMem = XED_ATTRIBUTE_DISP8_EIGHTHMEM as isize,
    Disp8Full = XED_ATTRIBUTE_DISP8_FULL as isize,
    Disp8FullMem = XED_ATTRIBUTE_DISP8_FULLMEM as isize,
    Disp8GprReader = XED_ATTRIBUTE_DISP8_GPR_READER as isize,
    Disp8GprReaderByte = XED_ATTRIBUTE_DISP8_GPR_READER_BYTE as isize,
    Disp8GprWriterLdopQ = XED_ATTRIBUTE_DISP8_GPR_WRITER_LDOP_Q as isize,
    Disp8GprWriterLdopD = XED_ATTRIBUTE_DISP8_GPR_WRITER_LDOP_D as isize,
    Disp8GprWriterStore = XED_ATTRIBUTE_DISP8_GPR_WRITER_STORE as isize,
    Disp8GprWriterStoreByte = XED_ATTRIBUTE_DISP8_GPR_WRITER_STORE_BYTE as isize,
    Disp8GprWriterStoreWord = XED_ATTRIBUTE_DISP8_GPR_WRITER_STORE_WORD as isize,
    Disp8Gscat = XED_ATTRIBUTE_DISP8_GSCAT as isize,
    Disp8Half = XED_ATTRIBUTE_DISP8_HALF as isize,
    Disp8HalfMem = XED_ATTRIBUTE_DISP8_HALFMEM as isize,
    Disp8Mem128 = XED_ATTRIBUTE_DISP8_MEM128 as isize,
    Disp8MovDDup = XED_ATTRIBUTE_DISP8_MOVDDUP as isize,
    Disp8QuarterMem = XED_ATTRIBUTE_DISP8_QUARTERMEM as isize,
    Disp8Scalar = XED_ATTRIBUTE_DISP8_SCALAR as isize,
    Disp8Tuple1 = XED_ATTRIBUTE_DISP8_TUPLE1 as isize,
    Disp8Tuple1_4X = XED_ATTRIBUTE_DISP8_TUPLE1_4X as isize,
    Disp8Tuple1Byte = XED_ATTRIBUTE_DISP8_TUPLE1_BYTE as isize,
    Disp8Tuple1Word = XED_ATTRIBUTE_DISP8_TUPLE1_WORD as isize,
    Disp8Tuple2 = XED_ATTRIBUTE_DISP8_TUPLE2 as isize,
    Disp8Tuple4 = XED_ATTRIBUTE_DISP8_TUPLE4 as isize,
    Disp8Tuple8 = XED_ATTRIBUTE_DISP8_TUPLE8 as isize,
    DoubleWideMemOp = XED_ATTRIBUTE_DOUBLE_WIDE_MEMOP as isize,
    DoubleWideOutput = XED_ATTRIBUTE_DOUBLE_WIDE_OUTPUT as isize,
    DWordIndices = XED_ATTRIBUTE_DWORD_INDICES as isize,
    ElementSizeD = XED_ATTRIBUTE_ELEMENT_SIZE_D as isize,
    ElementSizeQ = XED_ATTRIBUTE_ELEMENT_SIZE_Q as isize,
    ExceptionBR = XED_ATTRIBUTE_EXCEPTION_BR as isize,
    FixedBase0 = XED_ATTRIBUTE_FIXED_BASE0 as isize,
    FixedBase1 = XED_ATTRIBUTE_FIXED_BASE1 as isize,
    Gather = XED_ATTRIBUTE_GATHER as isize,
    HalfWideOutput = XED_ATTRIBUTE_HALF_WIDE_OUTPUT as isize,
    HleAcqAble = XED_ATTRIBUTE_HLE_ACQ_ABLE as isize,
    HleRelAble = XED_ATTRIBUTE_HLE_REL_ABLE as isize,
    IgnoresOsfxsr = XED_ATTRIBUTE_IGNORES_OSFXSR as isize,
    ImplicitOne = XED_ATTRIBUTE_IMPLICIT_ONE as isize,
    IndexRegIsPointer = XED_ATTRIBUTE_INDEX_REG_IS_POINTER as isize,
    IndirectBranch = XED_ATTRIBUTE_INDIRECT_BRANCH as isize,
    KMask = XED_ATTRIBUTE_KMASK as isize,
    Lockable = XED_ATTRIBUTE_LOCKABLE as isize,
    Locked = XED_ATTRIBUTE_LOCKED as isize,
    MaskOp = XED_ATTRIBUTE_MASKOP as isize,
    MaskOpEvex = XED_ATTRIBUTE_MASKOP_EVEX as isize,
    MaskAsControl = XED_ATTRIBUTE_MASK_AS_CONTROL as isize,
    MaskVariableMemop = XED_ATTRIBUTE_MASK_VARIABLE_MEMOP as isize,
    MemoryFaultSuppression = XED_ATTRIBUTE_MEMORY_FAULT_SUPPRESSION as isize,
    MmxExcept = XED_ATTRIBUTE_MMX_EXCEPT as isize,
    MpxPrefixAble = XED_ATTRIBUTE_MPX_PREFIX_ABLE as isize,
    MultiSource4 = XED_ATTRIBUTE_MULTISOURCE4 as isize,
    Mxcsr = XED_ATTRIBUTE_MXCSR as isize,
    MxcsrRd = XED_ATTRIBUTE_MXCSR_RD as isize,
    Nontemporal = XED_ATTRIBUTE_NONTEMPORAL as isize,
    Nop = XED_ATTRIBUTE_NOP as isize,
    NotSx = XED_ATTRIBUTE_NOTSX as isize,
    NotSxCond = XED_ATTRIBUTE_NOTSX_COND as isize,
    NoRipRel = XED_ATTRIBUTE_NO_RIP_REL as isize,
    Prefetch = XED_ATTRIBUTE_PREFETCH as isize,
    ProtectedMode = XED_ATTRIBUTE_PROTECTED_MODE as isize,
    QWordIndices = XED_ATTRIBUTE_QWORD_INDICES as isize,
    Rep = XED_ATTRIBUTE_REP as isize,
    RequiresAlignment = XED_ATTRIBUTE_REQUIRES_ALIGNMENT as isize,
    Ring0 = XED_ATTRIBUTE_RING0 as isize,
    Scalable = XED_ATTRIBUTE_SCALABLE as isize,
    Scatter = XED_ATTRIBUTE_SCATTER as isize,
    SimdScalar = XED_ATTRIBUTE_SIMD_SCALAR as isize,
    SkipLow32 = XED_ATTRIBUTE_SKIPLOW32 as isize,
    SkilLow64 = XED_ATTRIBUTE_SKIPLOW64 as isize,
    SpecialAgenRequired = XED_ATTRIBUTE_SPECIAL_AGEN_REQUIRED as isize,
    StackPop0 = XED_ATTRIBUTE_STACKPOP0 as isize,
    StackPop1 = XED_ATTRIBUTE_STACKPOP1 as isize,
    StackPush0 = XED_ATTRIBUTE_STACKPUSH0 as isize,
    StackPush1 = XED_ATTRIBUTE_STACKPUSH1 as isize,
    X87Control = XED_ATTRIBUTE_X87_CONTROL as isize,
    X87MmxStateCW = XED_ATTRIBUTE_X87_MMX_STATE_CW as isize,
    X87MmxStateR = XED_ATTRIBUTE_X87_MMX_STATE_R as isize,
    X87MmxStateW = XED_ATTRIBUTE_X87_MMX_STATE_W as isize,
    X87NoWait = XED_ATTRIBUTE_X87_NOWAIT as isize,
    XmmStateCW = XED_ATTRIBUTE_XMM_STATE_CW as isize,
    XmmStateR = XED_ATTRIBUTE_XMM_STATE_R as isize,
    XmmStateW = XED_ATTRIBUTE_XMM_STATE_W as isize,
}

impl From<xed_attribute_enum_t> for Attribute {
    fn from(x: xed_attribute_enum_t) -> Attribute {
        Self::from_u32(x).unwrap_or(Attribute::Invalid)
    }
}

impl From<Attribute> for xed_attribute_enum_t {
    fn from(x: Attribute) -> Self {
        x as Self
    }
}
