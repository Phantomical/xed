use num_traits::FromPrimitive;
use xed_sys2::xed_interface::*;

#[derive(Copy, Clone, Debug, Eq, PartialEq, Hash, Primitive)]
pub enum Category {
    Invalid = XED_CATEGORY_INVALID as isize,
    _3DNow = XED_CATEGORY_3DNOW as isize,
    AdoxAdcx = XED_CATEGORY_ADOX_ADCX as isize,
    Avx = XED_CATEGORY_AVX as isize,
    Avx2 = XED_CATEGORY_AVX2 as isize,
    Avx2Gather = XED_CATEGORY_AVX2GATHER as isize,
    Avx512 = XED_CATEGORY_AVX512 as isize,
    Avx512_4Fmaps = XED_CATEGORY_AVX512_4FMAPS as isize,
    Avx512_4Vnniw = XED_CATEGORY_AVX512_4VNNIW as isize,
    Avx512BitAlg = XED_CATEGORY_AVX512_BITALG as isize,
    Binary = XED_CATEGORY_BINARY as isize,
    BitByte = XED_CATEGORY_BITBYTE as isize,
    Blend = XED_CATEGORY_BLEND as isize,
    Bmi1 = XED_CATEGORY_BMI1 as isize,
    Bmi2 = XED_CATEGORY_BMI2 as isize,
    Broadcast = XED_CATEGORY_BROADCAST as isize,
    Call = XED_CATEGORY_CALL as isize,
    Cet = XED_CATEGORY_CET as isize,
    ClDemote = XED_CATEGORY_CLDEMOTE as isize,
    ClFlushOpt = XED_CATEGORY_CLFLUSHOPT as isize,
    Clwb = XED_CATEGORY_CLWB as isize,
    ClZero = XED_CATEGORY_CLZERO as isize,
    CMov = XED_CATEGORY_CMOV as isize,
    Compress = XED_CATEGORY_COMPRESS as isize,
    CondBr = XED_CATEGORY_COND_BR as isize,
    Conflict = XED_CATEGORY_CONFLICT as isize,
    Convert = XED_CATEGORY_CONVERT as isize,
    DataXfer = XED_CATEGORY_DATAXFER as isize,
    Decimal = XED_CATEGORY_DECIMAL as isize,
    Expand = XED_CATEGORY_EXPAND as isize,
    FcMov = XED_CATEGORY_FCMOV as isize,
    FlagOp = XED_CATEGORY_FLAGOP as isize,
    Fma4 = XED_CATEGORY_FMA4 as isize,
    Gather = XED_CATEGORY_GATHER as isize,
    Gfni = XED_CATEGORY_GFNI as isize,
    Ifma = XED_CATEGORY_IFMA as isize,
    Interrupt = XED_CATEGORY_INTERRUPT as isize,
    IO = XED_CATEGORY_IO as isize,
    IOStringOp = XED_CATEGORY_IOSTRINGOP as isize,
    KMask = XED_CATEGORY_KMASK as isize,
    Logical = XED_CATEGORY_LOGICAL as isize,
    LogicalFP = XED_CATEGORY_LOGICAL_FP as isize,
    Lzcnt = XED_CATEGORY_LZCNT as isize,
    Misc = XED_CATEGORY_MISC as isize,
    Mmx = XED_CATEGORY_MMX as isize,
    MovDir = XED_CATEGORY_MOVDIR as isize,
    Mpx = XED_CATEGORY_MPX as isize,
    Nop = XED_CATEGORY_NOP as isize,
    PclMulQdq = XED_CATEGORY_PCLMULQDQ as isize,
    PConfig = XED_CATEGORY_PCONFIG as isize,
    Pku = XED_CATEGORY_PKU as isize,
    Pop = XED_CATEGORY_POP as isize,
    PreFetch = XED_CATEGORY_PREFETCH as isize,
    PreFetchWT1 = XED_CATEGORY_PREFETCHWT1 as isize,
    Pt = XED_CATEGORY_PT as isize,
    Push = XED_CATEGORY_PUSH as isize,
    RdPid = XED_CATEGORY_RDPID as isize,
    RdRand = XED_CATEGORY_RDRAND as isize,
    RdSeed = XED_CATEGORY_RDSEED as isize,
    RdWrFsGs = XED_CATEGORY_RDWRFSGS as isize,
    Ret = XED_CATEGORY_RET as isize,
    Rotate = XED_CATEGORY_ROTATE as isize,
    SegOp = XED_CATEGORY_SEGOP as isize,
    Semaphore = XED_CATEGORY_SEMAPHORE as isize,
    SetCC = XED_CATEGORY_SETCC as isize,
    Sgx = XED_CATEGORY_SGX as isize,
    Sha = XED_CATEGORY_SHA as isize,
    Shift = XED_CATEGORY_SHIFT as isize,
    SMap = XED_CATEGORY_SMAP as isize,
    Sse = XED_CATEGORY_SSE as isize,
    StringOp = XED_CATEGORY_STRINGOP as isize,
    Sttni = XED_CATEGORY_STTNI as isize,
    Syscall = XED_CATEGORY_SYSCALL as isize,
    Sysret = XED_CATEGORY_SYSRET as isize,
    System = XED_CATEGORY_SYSTEM as isize,
    Tbm = XED_CATEGORY_TBM as isize,
    UncondBr = XED_CATEGORY_UNCOND_BR as isize,
    Vaes = XED_CATEGORY_VAES as isize,
    Vbmi2 = XED_CATEGORY_VBMI2 as isize,
    Vfma = XED_CATEGORY_VFMA as isize,
    VPclMulQdq = XED_CATEGORY_VPCLMULQDQ as isize,
    Vtx = XED_CATEGORY_VTX as isize,
    WaitPkg = XED_CATEGORY_WAITPKG as isize,
    WideNop = XED_CATEGORY_WIDENOP as isize,
    X87Alu = XED_CATEGORY_X87_ALU as isize,
    Xop = XED_CATEGORY_XOP as isize,
    XSave = XED_CATEGORY_XSAVE as isize,
    XSaveOpt = XED_CATEGORY_XSAVEOPT as isize,
}

impl From<xed_category_enum_t> for Category {
    fn from(x: xed_category_enum_t) -> Self {
        Self::from_u32(x).unwrap_or(Category::Invalid)
    }
}

impl From<Category> for xed_category_enum_t {
    fn from(x: Category) -> Self {
        x as Self
    }
}
